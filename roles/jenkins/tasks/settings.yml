---
- name: Check if jenkins_init_folder exists.
  ansible.builtin.stat:
    path: "{{ jenkins_init_folder }}"
  register: jenkins_init_folder_stat

- name: Ensure jenkins_init_folder exists.
  ansible.builtin.file:
    path: "{{ jenkins_init_folder }}"
    state: directory
    mode: 0644
  when: not jenkins_init_folder_stat.stat.exists

- name: Check if jenkins_init_file exists.
  ansible.builtin.stat:
    path: "{{ jenkins_init_file }}"
  register: jenkins_init_file_stat

- name: Ensure jenkins_init_file exists.
  ansible.builtin.file:
    path: "{{ jenkins_init_file }}"
    state: touch
    mode: 0644
  when: not jenkins_init_file_stat.stat.exists

- name: Populate jenkins_init_file with service tag.
  ansible.builtin.copy:
    dest: "{{ jenkins_init_file }}"
    content: "[Service]"
    mode: 0644
  when: not jenkins_init_file_stat.stat.exists

- name: Modify variables in init file.
  ansible.builtin.lineinfile:
    dest: "{{ jenkins_init_file }}"
    insertafter: '^Environment="{{ item.option }}='
    regexp: '^Environment="{{ item.option }} '
    line: 'Environment="{{ item.option }}={{ item.value }}"'
    state: present
    mode: 0644
  with_items: "{{ jenkins_init_changes }}"
  register: jenkins_config
  notify: Restart Jenkins if config changes

- name: Ensure jenkins_home directory exists.
  ansible.builtin.file:
    path: "{{ jenkins_home }}"
    state: directory
    owner: jenkins
    group: jenkins
    mode: u+rwx
    follow: true

- name: Create custom init scripts directory.
  ansible.builtin.file:
    path: "{{ jenkins_home }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: Configure proxy config for Jenkins
  ansible.builtin.template:
    src: proxy.xml
    dest: "{{ jenkins_home }}/proxy.xml"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0664
  register: jenkins_proxy_config
  when:
    - jenkins_proxy_host | length > 0
    - jenkins_proxy_port | length > 0

- name: Copy Jenkins init Groovy scripts
  ansible.builtin.template:
    src: init.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/init.groovy"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775
  register: jenkins_users_config

- name: Copy Jenkins extra logs init Groovy scripts
  ansible.builtin.template:
    src: extra-logging.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/extra-logging.groovy"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775
  register: jenkins_extra_logs_config

- name: Start Jenkins service
  ansible.builtin.set_fact:
    jenkins_restart_behavior: "service"
  notify: Restart Jenkins service
  changed_when: true

- name: Flush handlers immediately
  ansible.builtin.meta: flush_handlers

- name: Wait for Jenkins to start up
  ansible.builtin.uri:
    url: "http://{{ jenkins_master_host }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
    method: GET
    status_code: 200, 403
    return_content: "yes"
    body_format: raw
    follow_redirects: "none"
  register: jenkins_status
  delay: "{{ jenkins_connection_delay }}"
  retries: "{{ jenkins_connection_retries }}"
  until: (jenkins_status.status == 200 or jenkins_status.status == 403) and jenkins_status.content.find("Please wait while Jenkins is getting ready to work") == -1
  changed_when: true
  check_mode: false
  notify: Configure worker nodes

- name: Get the jenkins-cli jarfile from the Jenkins server
  ansible.builtin.get_url:
    url: "http://{{ jenkins_master_host }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_cli_jar_location }}"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0755
  register: cli_jarfile_get
  until: "'OK' in cli_jarfile_get.msg or '304' in cli_jarfile_get.msg or 'file already exists' in cli_jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: false

- name: Install Jenkins Plugins
  ansible.builtin.include_tasks: install-plugins.yml

- name: Restart Jenkins service
  ansible.builtin.set_fact:
    jenkins_restart_behavior: "safe-restart"
  notify: Restart Jenkins service
  changed_when: true

- name: Flush handlers immediately
  ansible.builtin.meta: flush_handlers

# - name: Immediately restart Jenkins on http or user changes.
#   ansible.builtin.set_fact:
#     jenkins_restart_behavior: "service"
#   notify: Restart Jenkins service
#   when: >
#     (jenkins_users_config is defined and jenkins_users_config.changed)
#     or (jenkins_http_config is defined and jenkins_http_config.changed)
#     or (jenkins_home_config is defined and jenkins_home_config.changed)
#     or (jenkins_proxy_config is defined and jenkins_proxy_config.changed)
#   tags: ['skip_ansible_lint']

# - name: Check if Jenkins initial admin password file exists
#   ansible.builtin.stat:
#     path: /var/lib/jenkins/secrets/initialAdminPassword
#   register: jenkins_password_file
#   changed_when: false
#   retries: 3
#   delay: 5
#   until: jenkins_password_file.stat.exists

# - name: Output Jenkins initial admin password
#   ansible.builtin.command: cat /var/lib/jenkins/secrets/initialAdminPassword
#   register: jenkins_admin_password
#   changed_when: false

# - name: Debug Jenkins initial admin password
#   ansible.builtin.debug:
#     msg: "Jenkins initial admin password: {{ jenkins_admin_password.stdout }}"
